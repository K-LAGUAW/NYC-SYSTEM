const showPrinterModal = document.getElementById('showPrinterModal');
const scanQr = document.getElementById('scanQr');
const showShipment = document.getElementById('showShipment');

const typeSelect = document.getElementById('typeSelect');
const priceSelect = document.getElementById('priceSelect');

const packageContainer = document.getElementById('packageContainer');
const packageCheckbox = document.getElementById('packageCheckbox');

const senderContainer = document.getElementById('senderContainer');
const senderInput = document.getElementById('senderInput');

const envelopeContainer = document.getElementById('envelopeContainer');
const envelopeInput = document.getElementById('envelopeInput');

const shipmentModal = document.getElementById('shipmentModal');
const shipmentModalInstance = bootstrap.Modal.getOrCreateInstance(shipmentModal);

const shipmentForm = document.getElementById('shipmentForm');
const shipmentButton = document.getElementById('shipmentButton');
const shipmentSpinner = document.getElementById('shipmentSpinner');

const qrModal = new bootstrap.Modal(document.getElementById('qrModal'));
const qrSpinner = document.getElementById('qrSpinner');

const printerModal = document.getElementById('printerModal');
const printerModalInstance = new bootstrap.Modal(printerModal);
const printerSelect = document.getElementById('printerSelect');

const shipmentsTable = document.getElementById('shipmentsTable');
const inputsForm = shipmentForm.querySelectorAll('input');

const provinceSelect = document.getElementById('provinceSelect');
const localitySelect = document.getElementById('localitySelect');

let scanner;
let table;
let uap;
let expandedRows = new Set(); 

document.addEventListener('DOMContentLoaded', function () {
    uap = new UAParser();
    initializeTable();
});

async function completeShipment(tracking_number) {
    try {
        const response = await fetch(`/api/v1/complete_shipment/${tracking_number}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        const data = await response.json();

        if (!response.ok) {
            showNotification('error', data.message);
            return;
        }

        showNotification('success', data.message);
        table.ajax.reload();
    } catch (error) {
        showNotification('error', 'Error al completar la entrega del envío');
    }
};

async function initializeTable() {
    if (table) {
        table.destroy();
    }

    table = await new DataTable(shipmentsTable, {
        ajax: {
            url: '/api/v1/shipments/',
            type: 'GET',
            dataSrc: ''
        },
        columnDefs: [
            {
                targets: '_all',
                className: 'text-center align-middle'
            }
        ],
        columns: [
            {
                data: null,
                defaultContent: '<i class="ti ti-id fs-4 detail-control" style="cursor: pointer;"></i>',
                responsivePriority: 0,
                searchable: false
            },
            {
                data: 'tracking_number',
                responsivePriority: 2
            },
            {
                data: 'sender',
                responsivePriority: 3
            },
            {
                data: 'recipient',
                responsivePriority: 1
            },
            {
                data: 'total_amount',
                responsivePriority: 4,
                searchable: false,
                render: function (data, type, row) {
                    return `<p class="text-success mb-0 fs-6 fw-bold">${data}</p>`;
                },

            },
            {
                data: 'creation_date',
                visible: false
            },
            {
                data: 'locality',
                visible: false
            }
        ],
        ordering: false,
        processing: true,
        responsive: true,
        scrollY: '67vh',
        scrollCollapse: true,
        paging: false,
        info: false,
        language: {
            url: '/static/json/es.json'
        },
        dom: "<'mb-2 d-flex justify-content-between p-0 m-0' <'d-inline' B> <f> >" + "<'row'<'col-md-12'tr>>",
        buttons: [
            {
                text: '<i class="ti ti-printer fs-5 d-block"></i>',
                extend: 'print',
                className: 'btn btn-success',
                title: 'Orden de Traslado',
                exportOptions: {
                    columns: [2, 3, 7],
                    rows: function (idx, data, node) {
                        return data.envelope_amount > 0 ? true : false;
                    }
                }
            }
        ]
    });

    table.on('click', '.detail-control', function (e) {
        let tr = e.target.closest('tr');
        let row = table.row(tr);
        let rowData = row.data();
        let trackingNumber = rowData.tracking_number;

        if (row.child.isShown()) {
            row.child.hide();
            expandedRows.delete(trackingNumber);
        } else {
            row.child(showDetails(rowData)).show();
            expandedRows.add(trackingNumber);
        }
    });

    table.on('draw.dt', function () {
        if (expandedRows.size > 0) {
            table.rows().every(function () {
                let rowData = this.data();
                if (rowData && expandedRows.has(rowData.tracking_number)) {
                    if (!this.child.isShown()) {
                        this.child(showDetails(rowData)).show();
                    }
                }
            });
        }
    });
};

function showDetails(data) {
    return (
        `
        <div class="d-flex flex-column my-2">
            <div class="text-center mb-3">
                <h2 class="text-decoration-underline link-offset-1 fs-4">Detalles del envio</h2>
            </div>
            <div class="d-flex flex-column flex-lg-row align-items-center justify-content-center justify-content-md-around mb-3">
                <div class="shipment-details text-center">
                    <p><strong>Fecha de envio:</strong> ${data.creation_date}</p>
                    <p><strong>Numero de seguimiento:</strong> ${data.tracking_number}</p>
                    <p><strong>Remitente:</strong> ${data.sender}</p>
                    <p><strong>Destinatario:</strong> ${data.recipient}</p>
                </div>
                <div class="shipment-status text-center">
                    <p><strong>Fecha de actualizacion:</strong> ${data.update_date}</p>
                    <p><strong>Numero de telefono:</strong> ${data.phone}</p>
                    <p><strong>Estado:</strong> ${data.status.name}</p>
                    <div class="d-flex gap-2 align-items-center justify-content-center">
                        <p class="text-decoration-underline link-offset-1 fs-4 m-1">Total:</p>
                        <p class="fs-4 bg-success rounded-pill d-inline-block px-3 text-white m-0">$ ${data.total_amount}</p>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-wrap justify-content-center align-items-center gap-2">
                ${data.status.id === 1 ? `<button class="btn btn-warning fw-medium" onclick="printQR('${dataParse}')">Reimprimir ticket</button>` : ''}
                ${data.status.id === 3 ? `<button class="btn btn-success fw-medium" onclick="completeShipment('${data.tracking_number}')">Confirmar entrega</button>` : ''}
            </div>
        </div>
        `
    );
};

async function printQR(data) {
    const payload = {
        nombreImpresora: getCookie('selectedPrinter'),
        serial: "YTAwODkxYjhfXzIwMjUtMDUtMTVfXzIwMjUtMDYtMTQjIyNZWkJRNTVZdko3bGJncWVJRXpUNCtxa0VTc1Y0Y1lhbXdhZVJscUI2OVNqME5tOVBNaVppcFdHRjVVVVNKTmQ2OXVoMTZzbHIxY05GMzBDRFVTUnRabC9BRUxqMTdOclNhSngxVjI1bzh2akE3bWRrc3FKdlhTRXB6blZ1NW1xVmN2WWJGZDRFSU1ZSXc1djQ0MU9OU3ROYURtbnMxQXdtRitKN29LOVEvdkQ0aTcrTGZUNTR6d3NlMWlhSk1iMXBUSFpPQ3lsZE9YU0dQME0yV1M1VmdpejJCRGNFemY0dldBOG5sZzlFaWtDVnd0RkMwUThCUVYrTjJtWlVGUUgyampFS1JUTkUvSG16NTgxTWxLK200NXVEWXdKa09RZjVZM0FuMC9TUFN2WGx6ZXl5WjBDSFpIUHp1T2M4WE50ZmlFOHpzcTg2Q0NpUE9Nam9QQjdYeUY0OUwzMWhNQi9xbHFGM0dUT0F5ZGpoa1VIWEozMjAyNkxDQ2djTFNyT0o4ZitPRjRsTlJjSTl1ZFBrNU44emNTcXJFVGVGYzdiQ0ZtRlMxSVRXb25FcUJXKzVHaTJuMWIxWUlVZVBwYkpEbkJmMVR3OXhTMTg4RU81a0JyL1dyYVB1Z1VKelUzYjZFdUpwTW11Z01XU053WmdMM2IwVVR6SXVnQmJ2NnBSaGdlamZWYmEybmozMEVMSVJZN3c1aXB6bjdaN3ZvUXc3VlJLcXVqcmMwV2VrMVV2emRjMjVZdXZhaU0zeU9lUXJ0U3JFWS9ic3hOd1hkcjhKYkdkdStZZHZSSVdQSm5wUzlKcEtBWUNubkhZWnNRc3FTTnFRN2VYWlRXaDljYWt2ai9oOU83SVV1YVkwZmJmQ1NCSXlxSkdwaGdHWHpHbSs5aWZNb21TNnczMD0=",
        operaciones: [
            { nombre: "Iniciar", argumentos: [] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "DescargarImagenDeInternetEImprimir", argumentos: ["https://i.postimg.cc/02PKCgMG/nyc-logo.png", 283, 0, false] },
            { nombre: "Iniciar", argumentos: [] },
            { nombre: "Feed", argumentos: [2] },
            { nombre: "EstablecerTamañoFuente", argumentos: [3, 3] },
            { nombre: "EstablecerEnfatizado", argumentos: [false] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "EstablecerSubrayado", argumentos: [false] },
            { nombre: "EstablecerImpresionAlReves", argumentos: [false] },
            { nombre: "EstablecerImpresionBlancoYNegroInversa", argumentos: [false] },
            { nombre: "EstablecerRotacionDe90Grados", argumentos: [false] },
            { nombre: "EscribirTexto", argumentos: [data.tracking_number] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Iniciar", argumentos: [] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "ImprimirCodigoQr", argumentos: [data.tracking_number, 302, 1, 0] },
            { nombre: "Iniciar", argumentos: [] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "EstablecerTamañoFuente", argumentos: [2, 2] },
            { nombre: "EstablecerEnfatizado", argumentos: [false] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "EstablecerSubrayado", argumentos: [true] },
            { nombre: "EstablecerImpresionAlReves", argumentos: [false] },
            { nombre: "EstablecerImpresionBlancoYNegroInversa", argumentos: [false] },
            { nombre: "EstablecerRotacionDe90Grados", argumentos: [false] },
            { nombre: "EscribirTexto", argumentos: ["REMITENTE:"] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "EstablecerTamañoFuente", argumentos: [2, 2] },
            { nombre: "EstablecerEnfatizado", argumentos: [false] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "EstablecerSubrayado", argumentos: [false] },
            { nombre: "EstablecerImpresionAlReves", argumentos: [false] },
            { nombre: "EstablecerImpresionBlancoYNegroInversa", argumentos: [false] },
            { nombre: "EstablecerRotacionDe90Grados", argumentos: [false] },
            { nombre: "EscribirTexto", argumentos: [data.sender] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "EstablecerTamañoFuente", argumentos: [2, 2] },
            { nombre: "EstablecerEnfatizado", argumentos: [false] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "EstablecerSubrayado", argumentos: [true] },
            { nombre: "EstablecerImpresionAlReves", argumentos: [false] },
            { nombre: "EstablecerImpresionBlancoYNegroInversa", argumentos: [false] },
            { nombre: "EstablecerRotacionDe90Grados", argumentos: [false] },
            { nombre: "EscribirTexto", argumentos: ["DESTINATARIO:"] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "EstablecerTamañoFuente", argumentos: [2, 2] },
            { nombre: "EstablecerEnfatizado", argumentos: [false] },
            { nombre: "EstablecerAlineacion", argumentos: [1] },
            { nombre: "EstablecerSubrayado", argumentos: [false] },
            { nombre: "EstablecerImpresionAlReves", argumentos: [false] },
            { nombre: "EstablecerImpresionBlancoYNegroInversa", argumentos: [false] },
            { nombre: "EstablecerRotacionDe90Grados", argumentos: [false] },
            { nombre: "EscribirTexto", argumentos: [data.recipient] },
            { nombre: "Feed", argumentos: [1] },
            { nombre: "Feed", argumentos: [7] },
            { nombre: "CorteParcial", argumentos: [] }
        ]
    };

    try {
        const response = await fetch("http://localhost:2811/imprimir", {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });
        const result = await response.json();

        if (result.ok === true) {
            return true;
        } else {
            showNotification('error', 'Error al imprimir el ticket, compruebe la impresora y reimprima manualmente');
            return false;
        }
    } catch (error) {
        showNotification('error', 'El servicio de impresión no esta disponible, reimprima manualmente');
    }
};

async function qrScanSuccess(decodedText) {
    await scanner.clear();

    qrSpinner.classList.remove('d-none');

    try {
        const response = await fetch(`/api/v1/update_shipment/${decodedText}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        const data = await response.json();

        if (response.ok) {
            showNotification('success', data.message);
            qrModal.hide();
            table.ajax.reload();
        } else {
            showNotification('error', data.message);
        }
    } catch (error) {
        showNotification('error', 'Error al actualizar el estado del envío');
    } finally {
        qrSpinner.classList.add('d-none');
        qrModal.hide();
    }
};

showShipment.addEventListener('click', async () => {
    typeSelect.replaceChildren(typeSelect.firstElementChild);
    priceSelect.replaceChildren(priceSelect.firstElementChild);
    provinceSelect.replaceChildren(provinceSelect.firstElementChild);

    shipmentModalInstance.show();

    try {
        let response = await fetch('https://apis.datos.gob.ar/georef/api/provincias');
        let data = await response.json();

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const naturalSort = (a, b) => {
            return a.nombre.localeCompare(
                b.nombre,
                'es',
                {
                    sensitivity: 'base',
                    numeric: true
                }
            );
        };

        const orderedProvinces = data.provincias.sort(naturalSort);

        const allowedProvinceIds = ['02', '06', '14', '18', '22', '30', '34', '82'];

        orderedProvinces
            .filter(province => allowedProvinceIds.includes(province.id.toString()))
            .forEach(province => {
                let option = document.createElement('option');
                option.value = province.nombre;
                option.text = province.nombre;
                provinceSelect.appendChild(option);
            });
    } catch (error) {
        console.error(error);
        return;
    }

    try {
        const response = await fetch('/api/v1/packages_categories/');
        const data = await response.json();

        if (!response.ok) {
            throw new Error();
        }

        data.package_types.forEach(type => {
            typeSelect.innerHTML += `<option value="${type.id}">${type.name}</option>`;
        });

        data.package_prices.forEach(price => {
            priceSelect.innerHTML += `<option value="${price.id}">${price.name} - $${price.mount}</option>`;
        });
    } catch {
        showNotification('error', 'Error contacte con el administrador');
    }
});

provinceSelect.addEventListener('change', async (e) => {
    let provinceId = e.target.value;

    localitySelect.replaceChildren(localitySelect.firstElementChild);
    localitySelect.selectedIndex = 0;

    try {
        let response = await fetch(`https://apis.datos.gob.ar/georef/api/municipios?provincia=${provinceId}&campos=id,nombre&max=1000`);
        let data = await response.json();

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const naturalSort = (a, b) => {
            return a.nombre.localeCompare(
                b.nombre,
                'es',
                {
                    sensitivity: 'base',
                    numeric: true
                }
            );
        };

        const orderedLocations = data.municipios.sort(naturalSort);

        orderedLocations.forEach(locality => {
            let option = document.createElement('option');
            option.value = locality.nombre;
            option.textContent = locality.nombre;
            localitySelect.appendChild(option);
        });
    } catch (error) {
        console.error(error);
        localitySelect.innerHTML = '<option selected disabled>Error</option>';
        return;
    }
});

shipmentButton.addEventListener('click', async () => {
    const formData = new FormData(shipmentForm);
    const formDataObject = Object.fromEntries(formData);

    try {
        const response = await fetch('/api/v1/create_shipment/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify(formDataObject)
        });
        const data = await response.json();

        if (!response.ok) {
            if (response.status === 400) {
                inputsForm.forEach(inputElement => {
                    const errorFields = data.fields;
                    const fieldName = inputElement.name;
    
                    if (errorFields.includes(fieldName)) {
                        inputElement.classList.add('is-invalid');
                    } else {
                        inputElement.classList.remove('is-invalid');
                    }
                });

                showNotification(data.type, data.title, data.message);
                return;
            }
            throw new Error('Server error');
        }

        await printQR(data.shipment);
        showNotification('success', data.message);
        shipmentModal.hide();
        table.ajax.reload();

    } catch (error) {
        showNotification('error', 'Error al contactar con el servidor');
    }
});

shipmentModalInstance._element.addEventListener('hidden.bs.modal', function () {
    shipmentForm.reset();

    senderInput.disabled = false;
    senderContainer.classList.remove('d-none');

    envelopeInput.disabled = false;
    envelopeContainer.classList.remove('d-none');

    packageCheckbox.disabled = false;
    packageCheckbox.checked = false;
    packageContainer.classList.remove('d-none');

    typeSelect.innerHTML = '';
    priceSelect.innerHTML = '';
});

scanQr.addEventListener('click', () => {
    scanner = new Html5QrcodeScanner("qr-reader", {
        fps: 10,
        qrbox: 250,
        showTorchButtonIfSupported: true,
        qrScanSuccess
    });

    scanner.render(qrScanSuccess);
    qrModal.show();
});

qrModal._element.addEventListener('hide.bs.modal', async function () {
    if (scanner) {
        scanner.clear();
    }
});

const handlePrinter = (printers, mapFn = printer => printer) => {
    if (printers.length === 0) {
        showNotification('info', 'Error de dispositivo', 'No se encontraron impresoras disponibles.');
        return false;
    }

    let printersAvailable = printers.map(mapFn);
    printersAvailable.forEach(printer => {
        printerSelect.innerHTML += `<option value="${printer}">${printer}</option>`;
    });

    alpinePrinter.withoutPrinters = false;
    return true;
};

showPrinterModal.addEventListener('click', async () => {
    printerSelect.replaceChildren(printerSelect.firstElementChild);
    printerModalInstance.show();
    alpinePrinter.isLoading = true;
    alpinePrinter.withoutPrinters = true;

    try {
        const response = await fetch("http://localhost:8000/impresoras");
        const data = await response.json();

        if (response.ok) {
            const osName = uap.getOS().name;

            if (osName === 'Windows') {
                handlePrinter(data);
            } else if (osName === 'Android') {
                handlePrinter(data, printer => printer.mac);
            }
        } else {
            showNotification('error', 'Error del servidor', 'Hubo un problema al obtener las impresoras.');
        }
    } catch (e) {
        if (e.message.includes("Failed to fetch") || e.name === "TypeError") {
            showNotification('error', 'Error de conexion', 'Verifique que el servidor de impresion este encendido.');
        } else {
            showNotification('error', 'Error inesperado', 'Ocurrio un desconocido.');
        }
    } finally {
        alpinePrinter.isLoading = false;
    }
});

printerModalInstance._element.addEventListener('hidden.bs.modal', () => {
    printerSelect.replaceChildren(printerSelect.firstElementChild);

    alpinePrinter.isLoading = true;
    alpinePrinter.withoutPrinters = true;
});

window.savePrinter = () => {
    const selectedPrinter = printerSelect.value;
    setCookie('selectedPrinter', selectedPrinter);

    showNotification('success', 'Configuracion exitosa', `La impresora ${selectedPrinter} se usara para imprimir.`);
    printerModalInstance.hide();
};